from pathlib import Path
from typing import *
import pandas
import math
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import statsmodels.api as sm
from loguru import logger
from statsmodels.regression import linear_model
from statsmodels.sandbox.stats.multicomp import TukeyHSDResults  # Used to add a typing annotation to tukeyhsd()
from statsmodels.stats.multicomp import MultiComparison
import argparse
import matplotlib.patches as mpatches

def assign_colors():
	pass


def generate_palette(table: pandas.DataFrame) -> pandas.Series:
	strains = table['strain'].unique()
	not_significant_color = "#777777"
	colors = ["#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33", "#a65628", "#f781bf"]
	palette = dict(zip(strains, colors))
	palette['not significant'] = not_significant_color

	is_significant = (table['padj'] < 0.05) & (table['log2FoldChange'].abs() >= 2.0)
	category = table['strain'].where(is_significant, 'not significant')

	return category, palette

def volcanoplot(table:pandas.DataFrame, ax:plt.Axes = None):

	column_label_x = 'log2FoldChange'
	column_label_y = '-log10(pvalue)'
	label_not_significant = 'not significant'
	table['category'], palette = generate_palette(table)
	table['color']  =table['category'].apply(lambda s: palette[s])
	if ax is None:
		fig, ax = plt.subplots(figsize = (12,10))

	table_significant = table[table['category'] != label_not_significant]
	table_notsignificant = table[table['category'] == label_not_significant]

	ax.scatter(
		x = column_label_x,
		y = column_label_y,
		data = table_significant,
		color = table_significant['color'],
		s = 60,
	)
	ax.scatter(
		x = column_label_x,
		y = column_label_y,
		data = table_notsignificant,
		color = table_notsignificant['color'],
		s = 60,
		alpha = 0.5
	)

	axis_scale = 1.05
	ax.set_xlabel(column_label_x, fontdict = {'fontsize': 24})
	ax.set_ylabel(column_label_y, fontdict = {'fontsize': 24})
	ax.set_ylim(0, max(table[column_label_y])*axis_scale)
	ax.set_xlim(min(table[column_label_x])*axis_scale, max(table[column_label_x])*axis_scale)
	ax.spines['right'].set_visible(False)
	ax.spines['top'].set_visible(False)
	#red_patch = mpatches.Patch(color = 'red', label = 'The red data')
	#plt.legend(handles = [red_patch])

	handles = [mpatches.Patch(color = color, label = label) for label, color in palette.items()]

	ax.legend(handles = handles, frameon = False, fontsize = 'x-large')

	for tick in ax.xaxis.get_major_ticks():
		tick.label.set_fontsize(14)
	for tick in ax.yaxis.get_major_ticks():
		tick.label.set_fontsize(14)
	plt.show()


def volcanoplotplotly(table: pandas.DataFrame):
	categories, palette = generate_palette(table)
	table['category'] = categories

	from pprint import pprint
	pprint(palette)
	print(table['category'].value_counts())

	column_label_fold_change = "log2FoldChange"
	import plotly.express as px
	fig = px.scatter(
		table,
		x = column_label_fold_change, y = "-log10(pvalue)",
		hover_data = ['locusTag'],
		color = 'category',
		color_discrete_map = palette,
		title = "Gene Expression Relative to WT",
		width = 1920,
		height = 1080,
		size = [6 for i in categories],

	)
	# fig.write_image("volcanoplot.png")
	fig.show()


def boxplot(table: pandas.DataFrame):
	# plt.style.use('fivethirtyeight')
	fig, ax = plt.subplots(figsize = (12, 10))
	fig: plt.Figure

	ax: plt.Axes = table.boxplot('log2FoldChange', by = 'chromosome', ax = ax)
	ax.set_title("")
	ax.set_ylabel("log2FoldChange")
	ax.set_facecolor("#FFFFFF")
	ax.grid(False)
	plt.tight_layout()


def create_parser(args: List[str] = None) -> argparse.Namespace:
	parser = argparse.ArgumentParser()

	parser.add_argument(
		"--filename",
		help = "Path to the differential expression table generated by deseq.",
		type = Path
	)

	parser.add_argument(
		"--output",
		help = "The output filename.",
		type = Path
	)

	if args:
		args = [str(i) for i in args]
		args = parser.parse_args(args)
	else:
		args = parser.parse_args()

	return args


def main(args):
	table = pandas.read_csv(args.filename, sep = "\t")
	table['-log10(pvalue)'] = table['padj'].apply(lambda s: -math.log10(s))
	# table = table.merge(annotation_table, how = "left", left_on = 'locusTag', right_on = 'locusTag')
	volcanoplot(table)


if __name__ == "__main__":
	project_folder = Path.home() / "storage" / "projects" / "eisha_rna"
	project_folder = Path.home() / "storage" / "projects" / "tils" / "RNAseq" / "differential_expression_trimmed"
	results_folder = project_folder / "results"
	data_folder = project_folder / "data"

	filename_table = data_folder / "differential_expression.tsv"
	filename_output = "volcanoplot.png"
	args = [
		"--filename", filename_table,
		"--output", filename_output
	]

	args = create_parser(args)
	main(args)
